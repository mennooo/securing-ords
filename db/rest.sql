begin

  -- Generated by Oracle SQL Developer REST Data Services 17.4.0.355.2349
  -- Exported REST Definitions from ORDS Schema Version 17.4.1.353.06.48
  -- Schema: DEMO   Date: Tue Mar 20 18:42:41 CET 2018
  --
  BEGIN
    ORDS.ENABLE_SCHEMA(
        p_enabled             => TRUE,
        p_schema              => 'DEMO',
        p_url_mapping_type    => 'BASE_PATH',
        p_url_mapping_pattern => 'demo',
        p_auto_rest_auth      => FALSE);    

    ORDS.DEFINE_MODULE(
        p_module_name    => 'Demo API',
        p_base_path      => '/api/',
        p_items_per_page =>  25,
        p_status         => 'PUBLISHED',
        p_comments       => NULL);      
    ORDS.DEFINE_TEMPLATE(
        p_module_name    => 'Demo API',
        p_pattern        => 'customers',
        p_priority       => 0,
        p_etag_type      => 'HASH',
        p_etag_query     => NULL,
        p_comments       => NULL);
    ORDS.DEFINE_HANDLER(
        p_module_name    => 'Demo API',
        p_pattern        => 'customers',
        p_method         => 'POST',
        p_source_type    => 'plsql/block',
        p_items_per_page =>  0,
        p_mimes_allowed  => '',
        p_comments       => NULL,
        p_source         => 
  'declare

    l_id          demo_customers.customer_id%type;

  begin

    begin
      -- Insert new customer
      insert into demo_customers (
        cust_first_name
      , cust_last_name
      , cust_email
      , cust_password
      , facebook_id
      ) values (
        :first_name
      , :last_name
      , :email
      , :password
      , :facebookid
      ) returning customer_id into l_id;

      -- Give customer the role
      insert into demo_cust_roles (
        role_name
      , customer_id
      ) values (
        ''demo.api.customer''
      , l_id
      );

    exception
      when dup_val_on_index then

        update demo_customers
          set facebook_id = nvl(:facebook_id,facebook_id)
        where cust_email = :email
            or facebook_id = :facebook_id
        returning customer_id into l_id;
    end;

    :location := l_id;
    :status := 201;

  end;'
        );
    ORDS.DEFINE_PARAMETER(
        p_module_name        => 'Demo API',
        p_pattern            => 'customers',
        p_method             => 'POST',
        p_name               => 'location',
        p_bind_variable_name => 'location',
        p_source_type        => 'RESPONSE',
        p_param_type         => 'INT',
        p_access_method      => 'OUT',
        p_comments           => NULL);      
    ORDS.DEFINE_PARAMETER(
        p_module_name        => 'Demo API',
        p_pattern            => 'customers',
        p_method             => 'POST',
        p_name               => 'status',
        p_bind_variable_name => 'status',
        p_source_type        => 'RESPONSE',
        p_param_type         => 'INT',
        p_access_method      => 'OUT',
        p_comments           => NULL);      
    ORDS.DEFINE_TEMPLATE(
        p_module_name    => 'Demo API',
        p_pattern        => 'me',
        p_priority       => 0,
        p_etag_type      => 'HASH',
        p_etag_query     => NULL,
        p_comments       => NULL);
    ORDS.DEFINE_HANDLER(
        p_module_name    => 'Demo API',
        p_pattern        => 'me',
        p_method         => 'GET',
        p_source_type    => 'json/item',
        p_items_per_page =>  25,
        p_mimes_allowed  => '',
        p_comments       => NULL,
        p_source         => 
  'select customer_id
      , cust_first_name
      , cust_last_name
      , cust_email
      , cust_password
    from demo_customers
  where cust_email = nvl(:email, :current_user)
      or facebook_id = :facebookid'
        );
    ORDS.DEFINE_TEMPLATE(
        p_module_name    => 'Demo API',
        p_pattern        => 'orders',
        p_priority       => 0,
        p_etag_type      => 'HASH',
        p_etag_query     => NULL,
        p_comments       => NULL);
    ORDS.DEFINE_HANDLER(
        p_module_name    => 'Demo API',
        p_pattern        => 'orders',
        p_method         => 'GET',
        p_source_type    => 'json/collection',
        p_items_per_page =>  25,
        p_mimes_allowed  => '',
        p_comments       => NULL,
        p_source         => 
  'select ordr.order_id
      , prod.product_name
      , to_char(ordr.order_timestamp, ''DD-MM-RRRR HH24:MI'') order_date
      , ordi.quantity
      , ordi.unit_price * ordi.quantity price
    from demo_orders ordr
    join demo_order_items ordi
      on ordi.order_id = ordr.order_id
    join demo_product_info prod
      on ordi.product_id = prod.product_id
    join demo_customers cust
      on ordr.customer_id = cust.customer_id
  where cust.cust_email = nvl(:email, :current_user)
      or cust.facebook_id = :facebookid
  order by ordr.order_timestamp desc'
        );
    ORDS.DEFINE_HANDLER(
        p_module_name    => 'Demo API',
        p_pattern        => 'orders',
        p_method         => 'POST',
        p_source_type    => 'plsql/block',
        p_items_per_page =>  0,
        p_mimes_allowed  => '',
        p_comments       => NULL,
        p_source         => 
  'declare

    l_id                  demo_orders.order_id%type;
    l_customer_id         demo_customers.customer_id%type;
    l_product_list_price  number;

  begin

    select customer_id into l_customer_id
      from demo_customers
    where cust_email = nvl(:email, :current_user)
        or facebook_id = :facebookid;

    select list_price into l_product_list_price
      from demo_product_info
    where product_id = :product_id;

    -- Insert order
    insert into demo_orders (
      customer_id
    , order_total
    , order_timestamp
    , user_name
    ) values (
      l_customer_id
    , :quantity * l_product_list_price
    , systimestamp
    , sys_context(''userenv'', ''current_user'')
    ) returning order_id into l_id;

    -- Inser order line(s)
    insert into demo_order_items (
      order_id
    , product_id
    , unit_price
    , quantity
    ) values (
      l_id
    , :product_id
    , l_product_list_price
    , :quantity
    );

    :location := l_id;
    :status := 201;

  end;'
        );
    ORDS.DEFINE_TEMPLATE(
        p_module_name    => 'Demo API',
        p_pattern        => 'products',
        p_priority       => 0,
        p_etag_type      => 'HASH',
        p_etag_query     => NULL,
        p_comments       => NULL);
    ORDS.DEFINE_HANDLER(
        p_module_name    => 'Demo API',
        p_pattern        => 'products',
        p_method         => 'GET',
        p_source_type    => 'json/collection',
        p_items_per_page =>  25,
        p_mimes_allowed  => '',
        p_comments       => NULL,
        p_source         => 
  'select *
    from demo_product_info'
        );
    ORDS.DEFINE_TEMPLATE(
        p_module_name    => 'Demo API',
        p_pattern        => 'products/:id',
        p_priority       => 0,
        p_etag_type      => 'HASH',
        p_etag_query     => NULL,
        p_comments       => NULL);
    ORDS.DEFINE_HANDLER(
        p_module_name    => 'Demo API',
        p_pattern        => 'products/:id',
        p_method         => 'GET',
        p_source_type    => 'json/item',
        p_items_per_page =>  25,
        p_mimes_allowed  => '',
        p_comments       => NULL,
        p_source         => 
  'select *
    from demo_product_info
  where product_id = :id'
        );


    COMMIT; 
  END;

  -- Generated by Oracle SQL Developer REST Data Services 17.4.0.355.2349
  -- Exported REST Definitions from ORDS Schema Version 17.4.1.353.06.48
  -- Schema: DEMO   Date: Tue Mar 20 18:50:53 CET 2018
  --
  BEGIN
    ORDS.ENABLE_SCHEMA(
        p_enabled             => TRUE,
        p_schema              => 'DEMO',
        p_url_mapping_type    => 'BASE_PATH',
        p_url_mapping_pattern => 'demo',
        p_auto_rest_auth      => FALSE);    

    ORDS.CREATE_ROLE(p_role_name  => 'demo.api.application');
    ORDS.CREATE_ROLE(p_role_name  => 'demo.api.customer');


    COMMIT; 
  END;

  -- Generated by Oracle SQL Developer REST Data Services 17.4.0.355.2349
  -- Exported REST Definitions from ORDS Schema Version 17.4.1.353.06.48
  -- Schema: DEMO   Date: Tue Mar 20 18:50:22 CET 2018
  --
  DECLARE
    l_roles     OWA.VC_ARR;
    l_modules   OWA.VC_ARR;
    l_patterns  OWA.VC_ARR;
  BEGIN
    ORDS.ENABLE_SCHEMA(
        p_enabled             => TRUE,
        p_schema              => 'DEMO',
        p_url_mapping_type    => 'BASE_PATH',
        p_url_mapping_pattern => 'demo',
        p_auto_rest_auth      => FALSE);    

    ORDS.CREATE_ROLE(p_role_name  => 'demo.api.customer');
    ORDS.CREATE_ROLE(p_role_name  => 'demo.api.application');

    l_roles(1)   := 'demo.api.customer';
    l_patterns(1):= '/api/me';
    l_patterns(2):= '/api/orders';
    ORDS.DEFINE_PRIVILEGE(
        p_privilege_name => 'demo.api.account',
        p_roles          => l_roles,
        p_patterns       => l_patterns,
        p_modules        => l_modules,
        p_label          => 'Get account details',
        p_description    => 'Your personal account details and order history',
        p_comments       => NULL);      
    l_roles.DELETE;
    l_modules.DELETE;
    l_patterns.DELETE;

    l_roles(1)   := 'demo.api.application';
    l_patterns(1):= '/api/customers';
    ORDS.DEFINE_PRIVILEGE(
        p_privilege_name => 'demo.api.customers',
        p_roles          => l_roles,
        p_patterns       => l_patterns,
        p_modules        => l_modules,
        p_label          => 'Create new customers',
        p_description    => 'Customers can order products',
        p_comments       => NULL);      
    l_roles.DELETE;
    l_modules.DELETE;
    l_patterns.DELETE;

    l_roles(1)   := 'demo.api.application';
    l_patterns(1):= '/api/products';
    ORDS.DEFINE_PRIVILEGE(
        p_privilege_name => 'demo.api.products',
        p_roles          => l_roles,
        p_patterns       => l_patterns,
        p_modules        => l_modules,
        p_label          => 'Get product information',
        p_description    => 'See available products',
        p_comments       => NULL);      
    l_roles.DELETE;
    l_modules.DELETE;
    l_patterns.DELETE;

    l_roles(1)   := 'SODA Developer';
    l_patterns(1):= '/soda/*';
    ORDS.DEFINE_PRIVILEGE(
        p_privilege_name => 'oracle.soda.privilege.developer',
        p_roles          => l_roles,
        p_patterns       => l_patterns,
        p_modules        => l_modules,
        p_label          => '',
        p_description    => '',
        p_comments       => NULL);      


    COMMIT; 

  END;

end;
/